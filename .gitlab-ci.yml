########################
# Linux CI/CD Pipeline #
########################

# Note: We currently run the tests against a Ubuntu based Miniconda docker container

variables:
    DOCKER_IMAGE: $CI_REGISTRY/div-9300/generic-data-display/ubuntu:latest

.linux-before: &linux-before
    - . /opt/conda/etc/profile.d/conda.sh
    - conda activate gd2

.linux-docker-login: &linux-docker-login
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

stages:
  - test
  - code analysis
  - containers

# Python Tests
pytest:
  image: $DOCKER_IMAGE
  stage: test
  tags:
    - linux
  before_script:
    - *linux-before
  script:
    - pytest --junitxml=report.xml --cov-report term --cov-report xml:coverage.xml --cov=generic_data_display
  artifacts:
    when: always
    reports:
      junit: report.xml
      cobertura: coverage.xml
  retry: 1

# Python Static Code Analysis
pylint:
  image: $DOCKER_IMAGE
  stage: code analysis
  tags:
    - linux
  before_script:
    - *linux-before
  allow_failure: true
  script:
    - mkdir ./pylint
    - pylint --output-format=text:pylint_output.txt,colorized generic_data_display/ | tee ./pylint/pylint.log || pylint-exit $?
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label=Pylint --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - echo "Pylint score is $PYLINT_SCORE"
  artifacts:
    paths:
      - pylint_output.txt
      - ./pylint/

# Docker Containers
containers:
  stage: containers
  tags:
    - linux-shell
  before_script:
    - *linux-docker-login
  rules:
    - if: $BUILD_CONTAINERS == "true"
  script:
    - ./build.sh
    - ./push.sh